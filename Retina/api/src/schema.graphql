interface ResponseCourse {
  name: String!
  size:Int!
} 

type Course {
  id: ID!
  uid: Int
  code: String
  title: String
  offerings: [Offering] @relation(name: "COURSE_OF", direction: "OUT")
  offerings_length: Int @cypher(statement: "MATCH (this)-[:COURSE_OF]->(o:Offering) RETURN COUNT(o)")
}

type Offering {
  id: ID!
  uid: String
  start_date: String
  end_date: String
  week: Int
  month: String
  status: String
  registrations: [Registration] @relation(name: "REGISTERED_FOR", direction: "OUT")
  responses: [Survey] @relation(name: "SURVEYED_FOR", direction: "OUT")
  reg_length: Int @cypher(statement: "MATCH (this)-[:REGISTERED_FOR]->(r:Registration) RETURN COUNT(r)")
  sur_length: Int @cypher(statement: "MATCH (this)-[:SURVEYED_FOR]->(s:Survey) RETURN COUNT(s)")
  course_code: String @cypher(statement: "MATCH (this)<-[:COURSE_OF]-(c:Course) RETURN c.code")
  course_name: String @cypher(statement: "MATCH (this)<-[:COURSE_OF]-(c:Course) RETURN c.title")
}

type Registration {
  id: ID!
  uid: String
  date: String
  status: String
  no_show: Int
}

type Survey {
  id: ID!
  uid: String
  classification: String 
  department: String 
  date: String
}


type Query {
  all_2019_course_data: [Course]
    @cypher(
      statement: "MATCH (c:Course)-[:COURSE_OF]->(o:Offering) WHERE o.start_date CONTAINS '2019' RETURN DISTINCT (c)"
    )
  all_offs_data(from: String, to: String): [Offering]
    @cypher(
      statement: "MATCH (o:Offering) WHERE date(o.start_date) >= date($from) AND date(o.start_date) <= date($to) RETURN o"
    )
}