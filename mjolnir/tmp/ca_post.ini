[tsv_extraction]
entities={
  'pc':  [
    ['pc_code', 0, 6],                         # 1 6 C
  ],
  'csd': [
    ['csd_uid', 15, 7],                         # 16 7 C
    ['csd_name', 22, 70],                       # 23 70 C
  ],
  'cn': [
    ['cn_name', 162, 30],                      # 163 30 C
    ['csd_uid', 15, 7],                     # 16 7 C
  ],
  'lc': [
    ['lc_lat', 136, 11],                       # 137 11 N
    ['lc_lng', 147, 13],                       # 148 13 N
  ],
  }
relations={
  'pc_TO_csd': [
    ['pc_code', 0, 6],                      # 1 6 C
    ['csd_uid', 15, 7],                     # 16 7 C
  ],
  'pc_TO_cn': [
    ['pc_code', 0, 6],                      # 1 6 C
    ['cn_name', 162, 30],                   # 163 30 C
    ['csd_uid', 15, 7],                     # 16 7 C
  ],
  'csd_TO_pr': [
    ['csd_uid', 15, 7],                     # 16 7 C
    ['pr_uid', 9, 2],                       # 10 2 C
  ],
  'csd_TO_csd_type': [
    ['csd_uid', 15, 7],                     # 16 7 C
    ['csd_type_code', 92, 3],               # 93 3 C
  ],
  'cn_TO_csd': [
    ['cn_name', 162, 30],                   # 163 30 C
    ['csd_uid', 15, 7],                     # 16 7 C
  ],
  'lc_TO_pc':  [
    ['lc_lat', 136, 11],                    # 137 11 N
    ['lc_lng', 147, 13],                    # 148 13 N
    ['pc_code', 0, 6],                      # 1 6 C
  ],
  }

[jotunheimr]
constraints={
  'pc': { 'u': 'code', },
  'pr': { 'u': 'uid', 'i': ['abbr', 'en_name', 'fr_name'], },
  'csd': { 'u': 'uid', 'i': ['name'], },
  'csd_type': { 'u': 'code', 'i': ['name'], },
  'cn': { 'c': ['name', 'csd_uid'], 'i': ['name'], },
  'lc': { 'p': ['lat', 'lng'], },
  }
config={
  'host': 'jotunheimr:7687',
  'username': 'neo4j',
  'password': '##dis@da2019##',
  }
topics={
  'pc': 'MERGE (n:CP_PostCode {code: event.pc_code})',
  'pr': 'MERGE (n:CP_Province {uid: event.pr_uid}) SET n.abbr = event.pr_abbr, n.en_name = event.pr_en_name, n.fr_name = event.pr_fr_name',
  'csd': 'MERGE (n:CP_CensusSubdivision {uid: event.csd_uid}) SET n.name = event.csd_name',
  'csd_type': 'MERGE (n:CP_CensusSubdivision_Type {uid: csd_type_code}) SET n.name = event.csd_type_name',
  'cn': 'MERGE (n:CP_Community {name: event.cn_name, csd_uid: event.csd_uid})',
  'lc': "MERGE (n:CP_Location {point: POINT({latitude: event.lc_lat, longitude: event.lc_lng, crs: 'WGS-84'})})",
  'pc_TO_csd': "MATCH (s:CP_PostCode {code: event.pc_code}), (e:CP_CensusSubdivision {uid: event.csd_uid}) WITH s, e MERGE (s)-[:PC_IN_CSD]->(e)",
  'pc_TO_cn': "MATCH (s:CP_PostCode {code: event.pc_code}), (e:CP_Community {name: event.cn_name, csd_uid: event.csd_uid}) WITH s, e MERGE (s)-[:PC_IN_CN]->(e)",
  'csd_TO_pr': "MATCH (s:CP_CensusSubdivision {uid: event.csd_uid}), (e:CP_Province {uid: pr_uid}) WITH s, e MERGE (s)-[:CSD_IN_PR]->(e)",
  'csd_TO_csd_type': "MATCH (s:CP_CensusSubdivision {uid: event.csd_uid}), (e:CP_CensusSubdivision_Type {uid: csd_type_code}) WITH s, e MERGE (s)-[:CSD_TYPE]->(e)",
  'cn_TO_csd': "MATCH (s:CP_Community {name: event.cn_name, csd_uid: event.csd_uid}), (e:CP_CensusSubdivision {uid: event.csd_uid}) WITH s, e MERGE (s)-[:CN_IN_CSD]->(e)",
  'lc_TO_pc': "MATCH (s:CP_Location {point: POINT({latitude: event.lc_lat, longitude: event.lc_lng, crs: 'WGS-84'})}), (e:CP_PostCode {code: event.pc_code}) WITH s, e MERGE (s)-[:LC_AT_PC]->(e)",
  }

[avro]
def={
  "namespace": "ca.gov.canada_post.pccf.v2015",
  "type": "record",
  "name": "entity",
  "fields": [
    {"name": "pc_code", "type": ["null", "string"]},
    {"name": "pr_uid", "type": ["null", "string"]},
    {"name": "pr_abbr", "type": ["null", "string"]},
  	{"name": "pr_en_name", "type": ["null", "string"]},
  	{"name": "pr_fr_name", "type": ["null", "string"]},
    {"name": "csd_uid", "type": ["null", "int"]},
    {"name": "csd_name", "type": ["null", "string"]},
    {"name": "csd_type_code", "type": ["null", "string"]},
    {"name": "csd_type_name", "type": ["null", "string"]},
    {"name": "cn_name", "type": ["null", "string"]},
    {"name": "lc_lat", "type": ["null", "float"]},
    {"name": "lc_lng", "type": ["null", "float"]}
  ]
  }

[yggdrasil]
broker_host=yggdrasil_broker
broker_port=9093
schema_registry_host=yggdrasil_schema_registry
schema_registry_port=8081
