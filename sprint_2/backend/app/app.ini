[bottle]
host=0.0.0.0
port=8088
server=waitress
threads=32

[neo4j]
server=bolt://jotunheimr:7687
user=neo4j
password=##dis@da2019##

[service]
survey_store_sur_evalese=MERGE (s:CSPS_Survey {uid: {uid}}) SET s.evalese = {content} RETURN apoc.util.md5([s.evalese]) AS result
survey_retrieve_sur_evalese=MATCH (s:CSPS_Survey {uid: {uid}}) RETURN s.evalese AS result
survey_store_template=MERGE (s:CSPS_Survey {uid: {uid}}) SET s.template = {content}
    WITH s, apoc.convert.fromJsonMap(s.template) AS c
      SET
        s.title = [c['title']['en'], c['title']['fr']],
        s.description = [c['description']['en'], c['description']['fr']],
        s.valid = [c['valid']['from'], c['valid']['to']],
        s.version = c['version']
    WITH s, c['questions'] AS questions
      UNWIND questions AS cq
    WITH s, cq, cq['cortex']['questionType'] AS qtype
      FOREACH (dummy IN CASE WHEN cq['qid'] <> 'none' THEN [1] ELSE [] END |
        MERGE (q:CSPS_Question {uid: cq['cortex']['uid']})
        FOREACH (dummy IN CASE WHEN qtype = 'CLASSIFIED' THEN [1] ELSE [] END | SET q:CLASSIFIED)
        FOREACH (dummy IN CASE WHEN qtype = 'SINGLE_CHOICE' THEN [1] ELSE [] END | SET q:SINGLE_CHOICE)
        FOREACH (dummy IN CASE WHEN qtype = 'MULTI_CHOICE' THEN [1] ELSE [] END | SET q:MULTI_CHOICE)
        FOREACH (dummy IN CASE WHEN qtype = 'FREE_TEXT' THEN [1] ELSE [] END | SET q:FREE_TEXT)
        SET
          q.type = qtype,
          q.question = [cq['question']['en'], cq['question']['fr']],
          q.classified_as = cq['cortex']['classifiedAs']
        MERGE (q)<-[:AT_ORDER {n: TOINTEGER(cq['cortex']['atOrder'])}]-(s)
      )
    RETURN apoc.util.md5([s.template]) AS result
survey_retrieve_template=MATCH (s:CSPS_Survey {uid: {uid}}) RETURN s.template AS result
response_store=WITH {uid} AS uid, apoc.convert.fromJsonMap({content}) AS c
    MERGE (s:CSPS_Survey {uid: c['response']['conducted']})
      MERGE (r:CSPS_Response {uid: uid})
        MERGE (r)-[:RESPOND_TO]->(s)
          SET r.created = [c['created']['from'], c['created']['to']], r.response = {content}
    WITH r, c, c['respondent'] AS cr
      MERGE (d:CSPS_Respondent {uid: r.uid})
        FOREACH (dummy IN CASE WHEN cr.fluent_at IS NOT NULL THEN [1] ELSE [] END |
          MERGE (a:GC_Language {name: CASE WHEN TRIM(cr.fluent_at) = 'en' THEN 'English (Anglais)' ELSE 'FranÃ§ais (French)' END})
          MERGE (d)-[:FLUENT_AT]->(a)
        )
        FOREACH (dummy IN CASE WHEN cr.located_in IS NOT NULL THEN [1] ELSE [] END |
          MERGE (p:CP_Province {abbr: SPLIT(TRIM(SPLIT(cr.located_in, ',')[1]), ' ')[0]})
      	  MERGE (a:CP_CSD {name: TRIM(SPLIT(cr.located_in, ',')[0])})
        	MERGE (a)-[:CSD_IN_PR]->(p)
        	MERGE (d)-[:LOCATED_IN]->(a)
        )
        FOREACH (dummy IN CASE WHEN cr.in_department IS NOT NULL THEN [1] ELSE [] END |
          MERGE (a:GC_Org {en_name: TRIM(SPLIT(cr.in_department, '(')[0]), is_dept: 'True'})
          MERGE (d)-[:IN_DEPARTMENT]->(a)
        )
        FOREACH (dummy IN CASE WHEN cr.work_as IS NOT NULL THEN [1] ELSE [] END |
          MERGE (a:GC_ClsLvl {uid: TRIM(cr.work_as)})
          MERGE (d)-[:WORK_AS]->(a)
        )
        MERGE (d)-[:RESPONDENT_OF]->(r)
    WITH r, c, c['questions'] AS questions
      UNWIND questions AS cq
    WITH r, c, cq
      MERGE (q:CSPS_Question {uid: cq['uid']})
    WITH r, c, cq, q, cq['questionAnswer'] AS answer, TOINTEGER(cq['atOrder']) AS at_order,
      CASE WHEN q.stats IS NULL THEN apoc.map.fromPairs([]) ELSE apoc.convert.fromJsonMap(q.stats) END AS map,
      CASE WHEN q.answer_total IS NULL THEN 0 ELSE q.answer_total END AS answer_total
        FOREACH (dummy IN CASE WHEN q.type = 'SINGLE_CHOICE' THEN [1] ELSE [] END |
          SET q.stats = apoc.convert.toJson(apoc.map.setKey(map, answer, apoc.map.get(map, answer, 0) + 1)), q.answer_total = answer_total + 1
          MERGE (a:CSPS_Answer {text: answer})
          MERGE (r)-[:AT_ORDER {n: at_order}]->(a)
          MERGE (a)-[:ANSWER_OF]->(q)
        )
    WITH r, c, cq, q, cq['questionAnswer'] AS answer, TOINTEGER(cq['atOrder']) AS at_order,
      CASE WHEN q.stats IS NULL THEN apoc.map.fromPairs([]) ELSE apoc.convert.fromJsonMap(q.stats) END AS map,
      CASE WHEN q.answer_total IS NULL THEN 0 ELSE q.answer_total END AS answer_total
        FOREACH (dummy IN CASE WHEN q.type = 'MULTI_CHOICE' THEN [1] ELSE [] END |
          SET q.stats = apoc.convert.toJson(apoc.map.setKey(map, answer, apoc.map.get(map, answer, 0) + 1)), q.answer_total = answer_total + 1
          FOREACH (dummy IN CASE WHEN q.type = 'MULTI_CHOICE' THEN [1] ELSE [] END |
            FOREACH (dummy IN CASE WHEN apoc.meta.type(answer) = 'STRING' THEN [1] ELSE [] END |
              MERGE (a:CSPS_Answer {text: answer})
              MERGE (r)-[:AT_ORDER {n: at_order}]->(a)
              MERGE (a)-[:ANSWER_OF]->(q)
            )
            FOREACH (dummy IN CASE WHEN apoc.meta.type(answer) = 'LIST' OR apoc.meta.type(answer) = 'STRING[]' THEN [1] ELSE [] END |
              FOREACH (c_answer IN answer |
                MERGE (a:Valhalla_Answer {text: c_answer})
                MERGE (r)-[:AT_ORDER {n: at_order}]->(a)
                MERGE (a)-[:ANSWER_OF]->(q)
              )
            )
          )
        )
    WITH r, c, cq, q, cq['questionAnswer'] AS answer, TOINTEGER(cq['atOrder']) AS at_order,
      CASE WHEN q.stats IS NULL THEN apoc.map.fromPairs([]) ELSE apoc.convert.fromJsonMap(q.stats) END AS map,
      CASE WHEN q.answer_total IS NULL THEN 0 ELSE q.answer_total END AS answer_total
        FOREACH (dummy IN CASE WHEN q.type = 'FREE_TEXT' THEN [1] ELSE [] END |
          SET q.stats = apoc.convert.toJson(apoc.map.setKey(map, answer, apoc.map.get(map, answer, 0) + 1)), q.answer_total = answer_total + 1
          MERGE (a:CSPS_Answer {text: answer})
          MERGE (r)-[:AT_ORDER {n: at_order}]->(a)
          MERGE (a)-[:ANSWER_OF]->(q)
        )
    WITH r, c, cq, q, cq['questionAnswer'] AS answer, TOINTEGER(cq['atOrder']) AS at_order,
      CASE WHEN q.stats IS NULL THEN apoc.map.fromPairs([]) ELSE apoc.convert.fromJsonMap(q.stats) END AS map,
      CASE WHEN q.answer_total IS NULL THEN 0 ELSE q.answer_total END AS answer_total
        FOREACH (dummy IN CASE WHEN q.classified_as = 'GC_Org' THEN [1] ELSE [] END |
          SET q.stats = apoc.convert.toJson(apoc.map.setKey(map, TRIM(SPLIT(TRIM(SPLIT(answer, '(')[1]), ')')[0]), apoc.map.get(map, TRIM(SPLIT(TRIM(SPLIT(answer, '(')[1]), ')')[0]), 0) + 1)), q.answer_total = answer_total + 1
          MERGE (a:GC_Org {en_name: TRIM(SPLIT(answer, '(')[0]), is_dept: 'True'})
          MERGE (r)-[:AT_ORDER {n: at_order}]->(a)
          MERGE (a)-[:ANSWER_OF]->(q)
        )
    WITH r, c, cq, q, cq['questionAnswer'] AS answer, TOINTEGER(cq['atOrder']) AS at_order,
      CASE WHEN q.stats IS NULL THEN apoc.map.fromPairs([]) ELSE apoc.convert.fromJsonMap(q.stats) END AS map,
      CASE WHEN q.answer_total IS NULL THEN 0 ELSE q.answer_total END AS answer_total
        FOREACH (dummy IN CASE WHEN q.classified_as = 'GC_Language' THEN [1] ELSE [] END |
          SET q.stats = apoc.convert.toJson(apoc.map.setKey(map, answer, apoc.map.get(map, answer, 0) + 1)), q.answer_total = answer_total + 1
          MERGE (a:GC_Language {name: answer})
          MERGE (r)-[:AT_ORDER {n: at_order}]->(a)
          MERGE (a)-[:ANSWER_OF]->(q)
        )
    WITH r, c, cq, q, cq['questionAnswer'] AS answer, TOINTEGER(cq['atOrder']) AS at_order,
      CASE WHEN q.stats IS NULL THEN apoc.map.fromPairs([]) ELSE apoc.convert.fromJsonMap(q.stats) END AS map,
      CASE WHEN q.answer_total IS NULL THEN 0 ELSE q.answer_total END AS answer_total
        FOREACH (dummy IN CASE WHEN q.classified_as = 'GC_ClsLvl' THEN [1] ELSE [] END |
          SET q.stats = apoc.convert.toJson(apoc.map.setKey(map, answer, apoc.map.get(map, answer, 0) + 1)), q.answer_total = answer_total + 1
          MERGE (a:GC_ClsLvl {uid: answer})
          MERGE (r)-[:AT_ORDER {n: at_order}]->(a)
          MERGE (a)-[:ANSWER_OF]->(q)
        )
    WITH r, c, cq, q, cq['questionAnswer'] AS answer, TOINTEGER(cq['atOrder']) AS at_order,
      CASE WHEN q.stats IS NULL THEN apoc.map.fromPairs([]) ELSE apoc.convert.fromJsonMap(q.metrics) END AS map,
      CASE WHEN q.answer_total IS NULL THEN 0 ELSE q.answer_total END AS answer_total
        FOREACH (dummy IN CASE WHEN q.classified_as = 'CP_CSD' THEN [1] ELSE [] END |
          SET q.stats = apoc.convert.toJson(apoc.map.setKey(map, TRIM(SPLIT(answer, ',')[0]), apoc.map.get(map, TRIM(SPLIT(answer, ',')[0]), 0) + 1)), q.answer_total = answer_total + 1
          MERGE (p:CP_Province {abbr: SPLIT(TRIM(SPLIT(answer, ',')[1]), ' ')[0]})
          MERGE (a:CP_CSD {name: TRIM(SPLIT(answer, ',')[0])})
          MERGE (a)-[:CSD_IN_PR]->(p)
          MERGE (r)-[:AT_ORDER {n: at_order}]->(a)
          MERGE (a)-[:ANSWER_OF]->(q)
        )
    WITH DISTINCT(r) AS r, c, COLLECT(DISTINCT(q)) AS qc
    WITH r, c, qc, REDUCE(m=[], q IN c['questions'] | CASE WHEN q['questionType'] = 'FREE_TEXT' THEN m + [apoc.map.fromPairs([['uid', q['uid']], ['text', q['questionAnswer']]])] ELSE m END) AS data
    WITH r, c, qc, apoc.map.fromPairs([['uid', r.uid], ['survey_uid', r.survey_uid], ['data', data]]) AS map
      SET r.free_text = apoc.convert.toJson(map)
    WITH r, c, REDUCE(m=[], q IN qc | m + [apoc.map.fromPairs([['uid', q.uid], ['total', q.answer_total], ['stats', q.stats], ['classifiedAs', q.classified_as], ['questionType', q.type], ['question', apoc.convert.toJson(q.question)]])]) AS data
      MERGE (s:CSPS_Survey {uid: c['response']['conducted']})
        SET s.metrics = apoc.convert.toJson(data)
    RETURN apoc.util.md5([r.response]) AS result
